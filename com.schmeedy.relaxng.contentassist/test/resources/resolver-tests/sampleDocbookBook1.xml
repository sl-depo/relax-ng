<?xml version="1.0" encoding="UTF-8"?>
<book xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en-US">
    <info><title>Erlide, the Erlang IDE</title><author>
            <personname>
                <firstname>Vlad</firstname>
                <surname>Dumitrescu</surname>
            </personname>
            <email>vladdu55@gmail.com</email>
        </author>
        <date>2008-08-28</date>
        <copyright>
            <year>2000-2008</year>
            <holder>Vlad Dumitrescu; parts IBM Corporation and others. See <link linkend="legal"
                    >Legal</link></holder>
        </copyright>
    </info>
    <chapter xml:id="gettingStarted">
        <info>
            <title>Getting started</title>
        </info>
        <sect1 xml:id="instalation_guide">
            <info>
                <title>Installation guide</title>
            </info>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Install Erlang <emphasis>R11</emphasis> or later, if it isn't already
                            present on your system. On Windows systems, use a path with no spaces in
                            it.</para>
                    </listitem>
                    <listitem>
                        <para>Install Eclipse. We target primarily version <emphasis>3.3</emphasis>,
                            but <emphasis>3.4</emphasis> works just as well.</para>
                    </listitem>
                    <listitem>
                        <para>If your network uses a proxy, fill in the appropriate data in
                                <menuchoice>
                                <guimenu>Window</guimenu>
                                <guisubmenu>Preferences</guisubmenu>
                                <guisubmenu> Install/Update</guisubmenu>
                                <guimenuitem>Proxy settings</guimenuitem>
                            </menuchoice>.</para>
                    </listitem>
                    <listitem>
                        <para>Download Erlide by going to <menuchoice>
                                <guimenu>Window</guimenu>
                                <guisubmenu>Software Updates</guisubmenu>
                                <guisubmenu>Find and Install...</guisubmenu>
                                <guimenuitem>Search for new features to install</guimenuitem>
                            </menuchoice>. In the dialog, choose <guibutton>New remote
                                site</guibutton> and enter <userinput>Erlide</userinput> as name and
                                <userinput> http://erlide.sourceforge.net/update</userinput> as URL.
                            Follow the dialogs with the obvious choices and in the end you will be
                            asked to restart.</para>
                    </listitem>
                    <listitem>
                        <para>Restart. Go to <menuchoice>
                                <guimenu>Window</guimenu>
                                <guisubmenu>Preferences</guisubmenu>
                                <guisubmenu>Erlang</guisubmenu>
                                <guimenuitem>Installed runtimes</guimenuitem>
                            </menuchoice> and add an entry (or several) for your Erlang installation
                            of choice. The required parameters are the name and the path to the top
                            level directory (i.e. <varname>$ERL_TOP</varname>). Now restart
                            again.</para>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="../images/runtimeinstall.png" format="PNG"/>
                            </imageobject>
                        </mediaobject>
                    </listitem>
                    <listitem>
                        <para>Done! You're ready to start exploring.</para>
                    </listitem>
                </itemizedlist>
            </para>
        </sect1>
        <sect1 xml:id="tutorials">
            <info>
                <title>Tutorials</title>
            </info>
            <sect2 xml:id="quickstart">
                <info>
                    <title>Quick start</title>
                    <author>
                        <personname>
                            <firstname>Eli</firstname>
                            <surname>Liang</surname>
                        </personname>
                    </author>
                </info>
                <epigraph>
                    <para>Thanks to Eli Liang for writing this guide.</para>
                </epigraph>
                <para>The steps outlined here use the Eclipse 3.4 menu names, for 3.3 the procedure
                    is highly similar. <orderedlist>
                        <listitem>
                            <para>Start eclipse</para>
                        </listitem>
                        <listitem>
                            <para>If it prompts you to choose workspace, select the folder you want
                                to work in. For this tutorial you might want to use a fresh
                                one.</para>
                        </listitem>
                        <listitem>
                            <para>On the menu bar, Choose <menuchoice>
                                    <guimenu>Help</guimenu>
                                    <guimenuitem>Software Updates...</guimenuitem>
                                </menuchoice>
                            </para>
                        </listitem>
                        <listitem>
                            <para>Select the <menuchoice>
                                    <guilabel>Installed Software</guilabel>
                                </menuchoice> tab. If "Erlang IDE" appears under name, then go to
                                    <xref linkend="step17"/>. </para>
                        </listitem>
                        <listitem>
                            <para>Select the <guilabel>Available Software</guilabel> tab.</para>
                        </listitem>
                        <listitem>
                            <para>Click the <guibutton>Add Site...</guibutton> button on the right.
                            </para>
                        </listitem>
                        <listitem>
                            <para>In the <guilabel>Location</guilabel> field, enter
                                    <userinput>http://erlide.sourceforge.net/update</userinput>
                            </para>
                        </listitem>
                        <listitem>
                            <para>Click <guibutton>OK</guibutton>
                            </para>
                        </listitem>
                        <listitem>
                            <para>Check the box left of
                                    <guilabel>http://erlide.sourceforge.net/update</guilabel></para>
                        </listitem>
                        <listitem>
                            <para>Check the box left of <guilabel>Unstable builds</guilabel></para>
                        </listitem>
                        <listitem>
                            <para>Click the <guibutton>Install...</guibutton> button on the right
                            </para>
                        </listitem>
                        <listitem>
                            <para>When the Install dialog pops, click on the
                                    <guibutton>Next</guibutton> button </para>
                        </listitem>
                        <listitem>
                            <para>Accept the terms of the license agreement. </para>
                        </listitem>
                        <listitem>
                            <para>Click <guibutton>Finish</guibutton>.</para>
                        </listitem>
                        <listitem>
                            <para>Click <guibutton>Yes</guibutton> to restart.</para>
                        </listitem>
                        <listitem>
                            <para>Go to <xref linkend="step20"/> below</para>
                        </listitem>
                        <listitem xml:id="step17">
                            <para>Select (click on) <guilabel>Erlang IDE</guilabel>
                            </para>
                        </listitem>
                        <listitem>
                            <para>Click on the <guibutton>Update</guibutton> button on the
                                right</para>
                        </listitem>
                        <listitem>
                            <para>Follow the directions to update and restart Eclipse.</para>
                        </listitem>
                        <listitem xml:id="step20">
                            <para>Click on the Workbench icon on the right side of the main eclipse
                                window</para>
                        </listitem>
                        <listitem>
                            <para>On menu bar, choose <menuchoice>
                                    <guimenu>Windows</guimenu>
                                    <guisubmenu>Preferences</guisubmenu>
                                    <guisubmenu>Erlang</guisubmenu>
                                    <guimenuitem>Install runtimes</guimenuitem>
                                </menuchoice></para>
                        </listitem>
                        <listitem>
                            <para>See if there is a runtime listed in the drop down field called
                                    <guilabel>Runtime used by Erlide itself (restart is
                                    required)</guilabel>. If there is something there, hit
                                    <guibutton>Cancel</guibutton> and go on to <xref
                                    linkend="step28"/>. </para>
                        </listitem>
                        <listitem>
                            <para>Click on the <guibutton>Add...</guibutton> button. </para>
                        </listitem>
                        <listitem>
                            <para>In the <guilabel>Runtime name</guilabel> field, enter
                                    <userinput>erl5.6.4</userinput>. </para>
                        </listitem>
                        <listitem>
                            <para>In the <guilabel>Location</guilabel> field, browse to the very top
                                level folder of the Erlang tree. This should be a folder called
                                "erl5.6.4" or something like that. </para>
                        </listitem>
                        <listitem>
                            <para>Click <guibutton>OK</guibutton>. Then Click
                                    <guibutton>Apply</guibutton> and <guibutton>OK</guibutton> in
                                the <guilabel>Install runtimes</guilabel> pane.</para>
                        </listitem>
                        <listitem>
                            <para>On menu bar, choose <menuchoice>
                                    <guimenu>File</guimenu>
                                    <guimenuitem>Restart</guimenuitem>
                                </menuchoice></para>
                        </listitem>
                        <listitem xml:id="step28">
                            <para>On menu bar, chose Windows -> Open Perspective -> Other... ->
                                Erlang. Click <guibutton>OK</guibutton>.</para>
                        </listitem>
                        <listitem>
                            <para>On menu bar, chose File -> New -> Project...</para>
                        </listitem>
                        <listitem>
                            <para>In wizard, chose Erlang -> Erlang Project and click Next</para>
                        </listitem>
                        <listitem>
                            <para>In Project name field, type
                                    <userinput>HelloWorldProject</userinput></para>
                        </listitem>
                        <listitem>
                            <para>Click <guibutton>Finish</guibutton>
                            </para>
                        </listitem>
                        <listitem>
                            <para>On menu bar, choose Project and make sure that <guimenuitem>Build
                                    Automatically</guimenuitem> option is checked</para>
                        </listitem>
                        <listitem>
                            <para>The left pane is the Erlang Navigator. Right-click the
                                HelloWorldProject branch. In the context menu that pops, select New
                                -> Other... -> Erlang -> Module and click Next (can also just select
                                "New Module" directly) </para>
                        </listitem>
                        <listitem>
                            <para>In the wizard, in the Module name field, type
                                    <userinput>hello</userinput>
                            </para>
                        </listitem>
                        <listitem>
                            <para>Click Finish </para>
                        </listitem>
                        <listitem>
                            <para>On menu bar, choose Run -> Run Configurations... </para>
                        </listitem>
                        <listitem>
                            <para>Select the "Erlang application" </para>
                        </listitem>
                        <listitem>
                            <para>Click the New Launch configuration button (left side above the
                                field with "type filter text") </para>
                        </listitem>
                        <listitem>
                            <para>Select the "New configuration"</para>
                        </listitem>
                        <listitem>
                            <para>Select the "Main tab" in the right pane</para>
                        </listitem>
                        <listitem>
                            <para>Check the box left of the HelloWorldProject</para>
                        </listitem>
                        <listitem>
                            <para>Select the "Runtimes" tab in the right pane </para>
                        </listitem>
                        <listitem>
                            <para>In the filed titled <guilabel>Node name</guilabel>, enter
                                    <userinput>erlide</userinput></para>
                        </listitem>
                        <listitem>
                            <para>In some environments, Java and Erlang look for the default
                                    <filename>.erlang.cookie</filename> file in different places,
                                and if you get connection problems you should enter some value for
                                the <guilabel>Cookie</guilabel> field. If the node is already
                                running, you have to use the same cookie value; otherwise, any
                                string will do.</para>
                        </listitem>
                        <listitem>
                            <para>Check the box to the left of "Start the Erlang node if not running
                                presently"</para>
                        </listitem>
                        <listitem>
                            <para>Click "Apply" and "Run"</para>
                        </listitem>
                        <listitem>
                            <para>In the center code pane (titled "<guilabel>hello.erl</guilabel>"),
                                enter the following code: <userinput>hello/0</userinput> (within the
                                brackets for the export, so it reads
                                    "<code>-export([hello/0]).</code>")</para>
                        </listitem>
                        <listitem>
                            <para>On the next line after the export, enter the following code:
                                <screen>hello() -> io:format("Hello World!~n", []).</screen></para>
                        </listitem>
                        <listitem>
                            <para>In the menu bar, choose File -> Save As...</para>
                        </listitem>
                        <listitem>
                            <para>Double-click on the folder titled "HelloWorldProject" in the
                                dialog box</para>
                        </listitem>
                        <listitem>
                            <para>Click on (select) the folder titled "<filename>src</filename>" in
                                the dialog box. The field entitled <guilabel>Enter or select the
                                    parent folder:</guilabel> should now read
                                    <computeroutput>HelloWorldProject/src</computeroutput>
                            </para>
                        </listitem>
                        <listitem>
                            <para>Click OK. The file "<filename>hello.erl</filename>" is saved in
                                the src directory and automatically built.</para>
                        </listitem>
                        <listitem>
                            <para>The lower pane has a number of tabs. Select the "Console"
                                tab.</para>
                        </listitem>
                        <listitem>
                            <para>In the console pane, enter the following command
                                    "<userinput>hello:hello().</userinput>" and hit return. The
                                output from the program will appear. </para>
                        </listitem>
                        <listitem>
                            <para>To exit, in the menu bar, choose File -> Close, and then File ->
                                Exit</para>
                        </listitem>
                    </orderedlist></para>
            </sect2>
            <sect2>
                <info>
                    <title>Hello World</title>
                    <author>
                        <personname>
                            <firstname>Alain</firstname>
                            <surname>O'Dea</surname>
                        </personname>
                    </author>
                </info>
                <epigraph>
                    <para>Thanks to Alain O'Dea for writing this guide.</para>
                </epigraph>
                <sect3>
                    <title>Install Erlang/OTP (if you have not already)</title>
                    <para>
                        <itemizedlist>
                            <listitem>
                                <para><emphasis>Ubuntu Linux</emphasis>: run the following in
                                    Terminal:
                                    <screen><command>sudo apt-get update</command>
<command>sudo apt-get install erlang</command></screen></para>
                            </listitem>
                            <listitem>
                                <para><emphasis>Windows</emphasis>: run the Windows Installer for
                                    Erlang </para>
                            </listitem>
                            <listitem>
                                <para><emphasis>Mac OS X</emphasis>: install MacPorts and then run
                                    the following in Terminal:
                                    <screen><command>sudo port selfupdate</command>
<command>sudo port install erlang</command></screen></para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </sect3>
                <sect3>
                    <title>Install Eclipse and ErlIDE</title>
                    <para>
                        <orderedlist>
                            <listitem>
                                <para>Download Eclipse IDE for Java Developers</para>
                            </listitem>
                            <listitem>
                                <para>Extract it where you want to run it from (there is no
                                    installer, just an archive)</para>
                            </listitem>
                            <listitem>
                                <para>Launch Eclipse by double-clicking eclipse (Linux), eclipse.exe
                                    (Windows), or Eclipse (Mac) in the eclipse folder</para>
                            </listitem>
                            <listitem>
                                <para>Select <guimenu>Help (menu) → Software Updates...</guimenu> (a
                                    dialog will appear)</para>
                            </listitem>
                            <listitem>
                                <para>Click Add Site...(another dialog will appear)</para>
                            </listitem>
                            <listitem>
                                <para>Enter http://erlide.sourceforge.net/update into the Location
                                    field, then click OK (dialog will close)</para>
                            </listitem>
                            <listitem>
                                <para>Select the checkbox by http://erlide.sourceforge.net/update
                                    and click Install... (another dialog will appear)</para>
                            </listitem>
                            <listitem>
                                <para> Select Next</para>
                            </listitem>
                            <listitem>
                                <para>Select I accept ... radio button and click Finish (a progress
                                    dialog will appear)</para>
                            </listitem>
                            <listitem>
                                <para> (wait for confirmation dialog) Select Yes (Eclipse will
                                    restart)</para>
                            </listitem>
                        </orderedlist>
                    </para>
                </sect3>
                <sect3>
                    <title>Add Primary Erlang Runtime</title>
                    <para>Without these steps things like syntax highlighting, code completion and
                        other significant aspects of the ErlIDE UI will not work properly. The IDE
                        will function basically, but it will not work as intended. <orderedlist>
                            <listitem>
                                <para>Select Window (menu) → Preferences... (Windows/Linux) or
                                    Eclipse (menu) → Preferences... (Mac) (a dialog will
                                    appear)</para>
                            </listitem>
                            <listitem>
                                <para>Expand Erlang and select Installed runtimes</para>
                            </listitem>
                            <listitem>
                                <para>Click Add... (a dialog will appear) and Enter Erlang in the
                                    Runtime name field</para>
                            </listitem>
                            <listitem>
                                <para>Click Browse... and select the root of your Erlang/OTP install
                                    (mine is /opt/local/lib/erlang), then click OK (dialog will
                                    close)</para>
                            </listitem>
                            <listitem>
                                <para>Click OK (preferences dialog will close)</para>
                            </listitem>
                        </orderedlist></para>
                </sect3>
                <sect3>
                    <title>Create Hello World Project</title>
                    <para>
                        <orderedlist>
                            <listitem>
                                <para>(wait for Eclipse to restart) Select Window (menu) → Close All
                                    Perspectives</para>
                            </listitem>
                            <listitem>
                                <para>Select Window (menu) → Open Perspective → Other... (a dialog
                                    will appear)</para>
                            </listitem>
                            <listitem>
                                <para>Select Erlang and click OK (dialog will close and Erlang
                                    Perspective will load)</para>
                            </listitem>
                            <listitem>
                                <para>In the Erlang Navigator bring up the context menu
                                    (right-click/control-click) and select New Erlang Project (a
                                    dialog will appear)</para>
                            </listitem>
                            <listitem>
                                <para>Enter hello_world in the Project Name field and click Finish
                                    (dialog will close and hello_world project will appear in Erlang
                                    Navigator view)</para>
                            </listitem>
                        </orderedlist>
                    </para>
                </sect3>
                <sect3>
                    <title>Start Erlang Node To Run Code</title>
                    <para>
                        <orderedlist>
                            <listitem>
                                <para>Select hello_world project, bring up the context menu and
                                    select <menuchoice>
                                        <guimenu>Run As </guimenu>
                                        <guimenuitem>Run Configurations...</guimenuitem>
                                    </menuchoice> (a dialog will appear)</para>
                            </listitem>
                            <listitem>
                                <para>Enter <userinput>hello_world</userinput> in the Name
                                    field</para>
                            </listitem>
                            <listitem>
                                <para>Double-click <guilabel>Erlang application</guilabel> (a new
                                    confguration will appear in the right-hand panel)</para>
                            </listitem>
                            <listitem>
                                <para>In the Main tab under Projects click the checkbox beside
                                    hello_world</para>
                            </listitem>
                            <listitem>
                                <para>In the Runtimes tab click the checkbox beside Start the Erlang
                                    node if not running already and enter
                                        <userinput>hello_world</userinput> in the Node name field.
                                </para>
                            </listitem>
                            <listitem>
                                <para>In some environments, the cookie value needs to be specified
                                    (because Java and Erlang don't find the same default
                                    cookie).</para>
                            </listitem>
                            <listitem>
                                <para>Click Run (dialog will close and Console will appear with
                                    hello_world Erlang node)</para>
                            </listitem>
                            <listitem>
                                <para>Leave the Console running for the next part</para>
                            </listitem>
                        </orderedlist>
                    </para>
                </sect3>
                <sect3>
                    <title>Write Hello World Live!</title>
                    <para>
                        <orderedlist>
                            <listitem>
                                <para>On the hello_world project bring up the context menu
                                    (right-click/control-click) and select <guilabel>New
                                        Module</guilabel> (dialog will appear)</para>
                            </listitem>
                            <listitem>
                                <para>Enter <userinput>hello_world</userinput> in Module name
                                    field</para>
                            </listitem>
                            <listitem>
                                <para>To the left of the Apply button, enter
                                        <userinput>say_hello</userinput> in the first box and
                                        <userinput>0</userinput> in the second box and click
                                        <guibutton>Apply</guibutton></para>
                            </listitem>
                            <listitem>
                                <para>Click <guibutton>Finish</guibutton> (dialog will close and an
                                    editor for <filename>hello_world.erl</filename> will be
                                    opened)</para>
                            </listitem>
                            <listitem>
                                <para>In the Console type
                                        <userinput>hello_world:say_hello().</userinput></para>
                            </listitem>
                            <listitem>
                                <para>Oops! It displays ok and shows no greeting! Let's fix
                                    that</para>
                            </listitem>
                            <listitem>
                                <para>In the hello_world.erl editor replace <code>ok</code> in
                                    say_hello with <userinput>io:format("Hello World!")</userinput>
                                    and save (<keycombo>
                                        <keycap function="control">Ctrl</keycap>
                                        <keycap>S</keycap>
                                    </keycombo> or <keycombo>
                                        <keycap function="command">Command</keycap>
                                        <keycap>S</keycap>
                                    </keycombo>)</para>
                            </listitem>
                            <listitem>
                                <para>In the Console type
                                        <userinput>hello_world:say_hello().</userinput></para>
                            </listitem>
                            <listitem>
                                <para>Great! It displays "Hello World!" for us! Let's get it to say
                                    something else</para>
                            </listitem>
                            <listitem>
                                <para>In the hello_world.erl editor replace <code>"Hello
                                        World!"</code> in say_hello with <code>"Hello
                                        ErlIDE!"</code>) and save (<keycombo>
                                        <keycap function="control">Ctrl</keycap>
                                        <keycap>S</keycap>
                                    </keycombo> or <keycombo>
                                        <keycap function="command">Command</keycap>
                                        <keycap>S</keycap>
                                    </keycombo>)</para>
                            </listitem>
                            <listitem>
                                <para>In the Console type
                                        <userinput>hello_world:say_hello().</userinput></para>
                            </listitem>
                            <listitem>
                                <para>Nifty! It displays <computeroutput>"Hello
                                        ErlIDE!"</computeroutput> for us! We can change the code at
                                    runtime.</para>
                            </listitem>
                        </orderedlist>
                    </para>
                </sect3>
            </sect2>
        </sect1>
        <sect1 xml:id="features">
            <info>
                <title>Features</title>
            </info>
            <para>
                <variablelist>
                    <varlistentry>
                        <term>Wizards</term>
                        <listitem>
                            <bridgehead>New Project wizard</bridgehead>
                            <para>Create projects with the <menuchoice>
                                    <guisubmenu>File</guisubmenu>
                                    <guisubmenu>New</guisubmenu>
                                    <guisubmenu>Project</guisubmenu>
                                    <guimenuitem>Erlang</guimenuitem>
                                </menuchoice> project wizard. If the project isn't new, you can do
                                an automatic search for source files, by using the "Discover paths"
                                option. Review the result and add other needed directories.</para>
                            <bridgehead>New Module wizard</bridgehead>
                            <para>Create files by right-clicking on the desired directory in the
                                resource view, and choosing either <menuchoice>
                                    <guisubmenu>File</guisubmenu>
                                    <guisubmenu>New</guisubmenu>
                                    <guisubmenu>Other</guisubmenu>
                                    <guimenuitem>File</guimenuitem>
                                </menuchoice> and entering a name ending with erl, or <menuchoice>
                                    <guisubmenu>File</guisubmenu>
                                    <guisubmenu>New</guisubmenu>
                                    <guisubmenu>Erlang</guisubmenu>
                                    <guimenuitem>Module</guimenuitem>
                                </menuchoice> and following the instructions in the wizard. Leave
                                empty any fields you don't understand the meaning of.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>Configuration </term>
                        <listitem>
                            <para>Preferences related to erlide can be found at <menuchoice>
                                    <guimenu>Window</guimenu>
                                    <guisubmenu>Preferences</guisubmenu>
                                    <guimenuitem>Erlang</guimenuitem>
                                </menuchoice>. Please note that not all options are functional
                                yet.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>Editor</term>
                        <listitem>
                            <para> The editor has all the generic Eclipse functionality and adds
                                several Erlang-specific features:<itemizedlist>
                                    <listitem>
                                        <para>Syntax highlighting </para>
                                    </listitem>
                                    <listitem>
                                        <para>Indentation of Erlang code <keycombo>
                                                <keycap>Ctrl</keycap>
                                                <keycap>I</keycap>
                                            </keycombo>. The reindentation affects the text
                                            selection or the current line only if nothing
                                            selected.</para>
                                    </listitem>
                                    <listitem>
                                        <para>OTP documentation shown for external calls by hovering
                                            the cursor over a function call</para>
                                    </listitem>
                                    <listitem>
                                        <para>Automatic completion of erlang modules, functions and
                                            records: <keycombo>
                                                <keycap function="control">Ctrl</keycap>
                                                <keysym>Space</keysym>
                                            </keycombo>. The list with proposals is also shown when
                                            entering <keycap>:</keycap>
                                            (<keysym>colon</keysym>).</para>
                                    </listitem>
                                    <listitem>
                                        <para>Go to declaration of function, macro or record:
                                                <keysym>F3</keysym> when the cursor is inside that
                                            element's name.</para>
                                    </listitem>
                                    <listitem>
                                        <para>Show declaration of macros and records as a hover
                                            window</para>
                                    </listitem>
                                    <listitem>
                                        <para>Bracket matching: the peer of the bracket at the
                                            cursor is highlighted.</para>
                                    </listitem>
                                    <listitem>
                                        <para>Selective display of functions and declarations
                                            (folding)</para>
                                    </listitem>
                                    <listitem>
                                        <para>context-sensitive menu when right clicking in the
                                            editor</para>
                                    </listitem>
                                </itemizedlist></para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>Builder</term>
                        <listitem>
                            <para>Building is automatic whenever a file is saved (if <menuchoice>
                                    <guimenu>Project</guimenu>
                                    <guimenuitem>Build automatically</guimenuitem>
                                </menuchoice> is enabled) and the modified module is also reloaded
                                in any Erlang backend that is linked to that project.</para>
                            <para>Provision for different runtimes, local or remote. Compile on one
                                runtime, test and debug on another </para>
                            <para>Show errors and warnings in code and in problems view </para>
                            <para>Automatically mark and list comments with TODO and FIXME </para>
                            <para>Erlang log printouts with link to code line</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>Outline view</term>
                        <listitem>
                            <para>Shows the structure of an Erlang module. The outline view allows
                                navigation in a module and an overview of the functions in it.
                                Clicking on an item will show its definition in the editor. The
                                shown functions and declarations can be filtered and sorted. </para>
                            <para>In the editor a Quick outline dialog can be used for navigation
                                    (<keycombo>
                                    <keycap function="control">Ctrl</keycap>
                                    <keycap>O</keycap>
                                </keycombo>). It has an automatic filtering feature, so you can just
                                begin writing the function name and the list will only show the
                                elements matching the prefix.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>Erlang console</term>
                        <listitem>
                            <para>The console lets you interact with the Erlang node that is behind
                                the scenes. At the moment it is not as useful as it may be, as it
                                only connects to the backend that hosts the Erlide functionality,
                                not the ones where the code under development is run. This will be
                                fixed in the future.</para>
                            <para>The console has history (<keycombo>
                                    <keycap>Ctrl</keycap>
                                    <keycap>Up</keycap>
                                </keycombo> and <keycombo>
                                    <keycap>Ctrl</keycap>
                                    <keycap>Down</keycap>
                                </keycombo>), syntax highlighting, code completion and other
                                experimental features, like colored background for text depending on
                                which process it was written from (useful when several processes
                                output trace messages).</para>
                            <para>When lrunning/debugging, a "normal" console will show up and it
                                can be used to interact with the runtime, but it has limited
                                functionality.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>Live expressions view</term>
                        <listitem>
                            <para>In this view you can enter expressions that will be reevaluated
                                every time a file is recompiled or when you press the
                                    <guilabel>refresh</guilabel> button in the view. You have to
                                create a new entry, then go to the expression field and edit it.
                                There is no need to end the expression with a dot.<warning>
                                    <para>Don't use expressions that might kill or crash the runtime
                                        (for example <userinput>init:stop()</userinput>), because
                                        there are no restrictions yet and you'll get exactly what
                                        you ask for!</para>
                                </warning></para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>Process list view</term>
                        <listitem>
                            <para>A process list similar to etop. Double-clicking a process will
                                show details about it. At the top, one can choose which backend to
                                show the list from.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>EDoc view</term>
                        <listitem>
                            <para>Opening a "Edoc" view (in <menuchoice>
                                    <guimenu>Window</guimenu>
                                    <guisubmenu>Show view</guisubmenu>
                                    <guimenuitem>Erlang</guimenuitem>
                                </menuchoice>) will display the documentation for the function where
                                the cursor is. The documentation is also shown in a hover window,
                                when the mouse cursor is above a function call.</para>
                            <para>The OTP documentation is shown, if installed on your system. Also,
                                if the project contains HTML documentation that is located in an
                                OTP-like location (i.e. in a <filename>doc/html</filename> directory
                                in the project ), then this documentation is also shown.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>Debugger</term>
                        <listitem>
                            <para>We offer all the features of the standard debugger, because we are
                                using it.</para>
                            <para>Breakpoints, single-stepping. Breakpoints can be set by
                                double-clicking on the left-side gutter in the editor.</para>
                            <para>Inspection and modification of local variables.</para>
                            <para>Distributed debugger, debug on multiple nodes.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>Problems view</term>
                        <listitem>
                            <para>The problems view will show all errors and warnings from the
                                compiler. Clicking them opens the file in the editor at the right
                                line.</para>
                            <para>There is also a <guilabel>Tasks</guilabel> view that will detect
                                comments starting with <code>TODO</code>, <code>FIXME</code> and
                                    <code>XXX</code> and show them there.</para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </para>
            <sect2>
                <info>
                    <title>A few Eclipse tips</title>
                </info>
                <para>For those not familiar with Eclipse, some short tips and tricks:<itemizedlist>
                        <listitem>
                            <para><keycombo>
                                    <keycap function="control">Ctrl</keycap>
                                    <keycap function="shift">Shift</keycap>
                                    <keycap>L</keycap>
                                </keycombo> will display a list of key bindings to the various
                                commands</para>
                        </listitem>
                        <listitem>
                            <para>The Eclipse help system is pretty comperhensive, use it to find
                                your way around.</para>
                        </listitem>
                    </itemizedlist></para>
            </sect2>
        </sect1>
        <sect1 xml:id="concepts">
            <info>
                <title>Concepts</title>
            </info>
            <sect2 xml:id="backends">
                <info>
                    <title>Runtimes and backends</title>
                </info>
                <para>In Erlide we often use the terms <emphasis>runtime</emphasis> and
                        <emphasis>backend</emphasis>. Here we will try to make clear what each of
                    them means.</para>
                <variablelist>
                    <varlistentry>
                        <term>Runtime</term>
                        <listitem>
                            <para>Describes an Erlang installation by pointing to its home directory
                                and optionally adding extra code path entries and/or arguments. For
                                example, one might want to have two R12B runtimes defined, one with
                                and one without SMP enabled, and be able to refer to them quickly.
                                At the moment, this installation must be a full installation (from
                                the source with documentation) but at a future time we will support
                                other repository formats (CEAN, Faxien).</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>Backend</term>
                        <listitem>
                            <para>Is an Erlang node that has Erlide-specific code loaded and
                                running. </para>
                            <para>There are two kinds of backends: managed and standalone. The
                                Erlang node behind a <emphasis role="bold">managed</emphasis>
                                backend is started and stopped by Erlide. The one behind a <emphasis
                                    role="bold">standalone</emphasis> one has an independent life
                                cycle. A managed backend's definition must include a runtime; for a
                                standalone one, the reference is informative only since the Erlang
                                node is already started.</para>
                            <para>There are several kinds of backends: ide, build and execution. A
                                single Erlang node may very well be behind several backends, but
                                only at most one of them must be managed.</para>
                            <variablelist>
                                <varlistentry>
                                    <term>IDE backend</term>
                                    <listitem>
                                        <para>Used by Erlide itself for all IDE related
                                            functionality (lexing, parsing, etc)</para>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                    <term>Build backend</term>
                                    <listitem>
                                        <para>Each project references a build backend where the
                                            compilation is done. This is also where the OTP
                                            documentation is taken from. The backend is specified in
                                            the project's properties and defaults to the IDE
                                            backend.</para>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                    <term>Execution backend</term>
                                    <listitem>
                                        <para>The execution backend is where the code is loaded and
                                            run/debugged. It is specified in an Eclipse run or debug
                                            configuration.</para>
                                    </listitem>
                                </varlistentry>
                            </variablelist>
                        </listitem>
                    </varlistentry>
                </variablelist>
                <note>
                    <bridgehead>A note about cookies</bridgehead>
                    <para>In some environments, Java and Erlang don't look for the default
                            <filename>.erlang.cookie</filename> file in the same places. This will
                        result in failure to connect the two nodes. There are two ways to solve
                        that: <itemizedlist>
                            <listitem>
                                <para>check where the two VMs look for the file and make sure that
                                    identical copies are found in each place</para>
                            </listitem>
                            <listitem>
                                <para>enter some value in the cookie field. If the Erlang node is
                                    already running, then of course the entered value should be
                                    identical to the one it uses.</para>
                            </listitem>
                        </itemizedlist></para>
                </note>
            </sect2>
        </sect1>
    </chapter>
    <chapter xml:id="reference">
        <info>
            <title>Reference</title>
        </info>
        <sect1 xml:id="create_project">
            <info>
                <title>Creating a project</title>
            </info>
            <para>To create a project:</para>
            <orderedlist inheritnum="ignore" continuation="restarts">
                <listitem>
                    <para> Click <menuchoice>
                            <guimenu>File</guimenu>
                            <guisubmenu>New</guisubmenu>
                            <guisubmenu>Other...</guisubmenu>
                            <guimenuitem>Erlang Project</guimenuitem>
                        </menuchoice> or use the context menu in the navigator, right-clicking and
                        choosing <menuchoice role="bold">
                            <guimenu>New</guimenu>
                            <guimenuitem>Erlang Project</guimenuitem>
                        </menuchoice></para>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="../images/file_menu.png" format="PNG"/>
                        </imageobject>
                    </mediaobject>
                </listitem>
                <listitem>
                    <para> In the <guimenu>New Erlang Project</guimenu> wizard, enter the project
                        name and if needed choose the project's location</para>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="../images/new_project_wizard.png" format="PNG"/>
                        </imageobject>
                    </mediaobject>
                </listitem>
                <listitem>
                    <para> Click <guibutton>Next</guibutton>.</para>
                </listitem>
                <listitem>
                    <para> In the <emphasis role="bold">Project Build Preferences</emphasis> boxes,
                        type Output, Source and Include folders or use the default values.</para>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="../images/new_proj_build_properties.png"
                                format="PNG"/>
                        </imageobject>
                    </mediaobject>
                </listitem>
                <listitem>
                    <para> To create your project, click <guibutton>Finish</guibutton>.</para>
                </listitem>
            </orderedlist>
        </sect1>
        <sect1 xml:id="import_project">
            <info>
                <title>Importing an Erlang Project</title>
            </info>
            <para>Import a project:</para>
            <orderedlist inheritnum="ignore" continuation="restarts">
                <listitem>
                    <para> Click <menuchoice>
                            <guimenu>File</guimenu>
                            <guisubmenu>Import</guisubmenu>
                            <guisubmenu>Erlang</guisubmenu>
                            <guimenuitem>Import erlang project into workspace</guimenuitem>
                        </menuchoice> or right click in <menuchoice>
                            <guimenu>Erlang Navigator</guimenu>
                            <guimenuitem>Import...</guimenuitem>
                        </menuchoice></para>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="../images/import_wizard01.png" format="PNG"/>
                        </imageobject>
                    </mediaobject>
                </listitem>
                <listitem>
                    <para> In the Erlang Project Import Wizard, <guibutton>Browse...</guibutton> for
                            <emphasis role="bold">Erlang project</emphasis></para>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="../images/import_wizard02.png" format="PNG"/>
                        </imageobject>
                    </mediaobject>
                </listitem>
                <listitem>
                    <para> In the source field select project.</para>
                </listitem>
                <listitem>
                    <para> In Options you can choose to link to all folders and all files or to Copy
                        selected files and selected folders to workspace.</para>
                </listitem>
                <listitem>
                    <para> To import your project, click <guibutton>Finish</guibutton>.</para>
                </listitem>
            </orderedlist>
        </sect1>
        <sect1 xml:id="configure_project">
            <info>
                <title>Configuring a project</title>
            </info>
            <para>In the Navigator pane, right-click on the project and choose <menuchoice>
                    <guimenu>Properties</guimenu>
                    <guimenuitem>Erlang</guimenuitem>
                </menuchoice>. The dialog allows you to specify the project's settings.</para>
            <para>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="../images/projectproperties.png" format="PNG"/>
                    </imageobject>
                </mediaobject>
            </para>
            <para>The build backend specifies the Erlang node on which the compilation will be done.
                By default, we use the same backend as the one the IDE is using and in most cases
                this is sufficient. See the <link linkend="backends">Backends</link> section for
                more details. </para>
            <para>The "make unique" box lets you decide if the specified name will get a unique
                suffix in order to ensure that there will be no conflict with other running nodes
                (the use case is when there are several users running Erlide on the same machine,
                it's difficult to ensure that they won't use the same name for nodes). The suffix is
                derived from the workspace path, so it is deterministic. </para>
            <para>An empty cookie field means thet the user's default cookie will be used.</para>
        </sect1>
        <sect1 xml:id="editor_view">
            <info>
                <title>Editor view</title>
            </info>
            <para>The Erlang editor provides specialized features for editing Erlang related
                files.</para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="../images/view_editor.png" format="PNG"/>
                </imageobject>
            </mediaobject>
            <para>Associated with the editor is an Erlang-specific <link
                    xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="erlide_outline_view.html"
                    >outline view</link>, which shows the structure of the active
                    <filename>.erl</filename> or <filename>.hrl</filename> file. It is updated as
                you edit these files.</para>
            <para>The editor includes the following features:</para>
            <itemizedlist>
                <listitem>
                    <para> Syntax highlighting</para>
                </listitem>
                <listitem>
                    <para> Content/code assist; auto completion of function calls, display of
                        function documentation)</para>
                </listitem>
            </itemizedlist>
            <para>The most common way to invoke the Erlang editor is to open a file from the Erlang
                Navigator. If you want to open an Erlang file by name, the keyboard shortcut is
                    <keycombo>
                    <keycap function="control">Ctrl</keycap>
                    <keycap function="shift">Shift</keycap>
                    <keycap>R</keycap>
                </keycombo>.</para>
        </sect1>
        <sect1 xml:id="running_project">
            <info>
                <title>Running and debugging Erlang code</title>
            </info>
            <para>The Eclipse way to specify how to run the code that is being developed is called
                    <emphasis>launch configurations</emphasis>. Erlide provides support for creating
                and executing Erlang-specific launch configurations. These configurations can be
                created and edited by opening the <menuchoice>
                    <guimenu>Run</guimenu>
                    <guimenuitem>Run configurations...</guimenuitem>
                </menuchoice> dialog (or the <menuchoice>
                    <guimenu>Debug</guimenu>
                    <guimenuitem>Debug configurations...</guimenuitem>
                </menuchoice> one, which offers some additional debug-specific options). </para>
            <para>The main tab lets you select the projects whose code will be loaded and executed.
                There is also provision for defining one's own initialization by providing a
                function and arguments to be called. <mediaobject>
                    <imageobject>
                        <imagedata fileref="../images/debug_main.png" format="PNG"/>
                    </imageobject>
                </mediaobject></para>
            <para>The runtimes tab lets you define the runtime that will be used and the node's name
                and cookie. The cookie is optional, defaulting to the user's default cookie. <mediaobject>
                    <imageobject>
                        <imagedata fileref="../images/debug_runtimes.png" format="PNG"/>
                    </imageobject>
                </mediaobject></para>
            <para> For a debug launch config, the debug tab contains the related options. The one
                that is erlide specific is the list of interpreted modules. The selected modules
                will be interpreted alongside with any module (from the referenced projects) that
                contains an enabled breakpoint. A similar list is available in the
                    <guilabel>Interpreted modules</guilabel> view, allowing to change the status of
                the modules while debugging.<mediaobject>
                    <imageobject>
                        <imagedata fileref="../images/debug_debug.png" format="PNG"/>
                    </imageobject>
                </mediaobject></para>
            <sect2>
                <info>
                    <title>Debugging</title>
                </info>
                <para>While in the debugger, you can do most of the things that are expected while
                    debugging: set breakpoints, execute code one line at the time, viewing local
                    variables and even modifying them. Until a more detailed documentation of the
                    debugger will be written, here come a couple of pictures showing a line of code
                    executed with a changed variable. Before: <mediaobject>
                        <imageobject>
                            <imagedata fileref="../images/dbg1.png" format="PNG"/>
                        </imageobject>
                    </mediaobject> ... and after: <mediaobject>
                        <imageobject>
                            <imagedata fileref="../images/dbg2.png" format="PNG"/>
                        </imageobject>
                    </mediaobject></para>
            </sect2>
        </sect1>
        <sect1 xml:id="navigator">
            <info>
                <title>Erlang navigator view</title>
            </info>
            <para>The Erlang naviagor view displays, in a tree structure, only elements relevant to
                Erlang project files. In this view you can do the following:</para>
            <itemizedlist>
                <listitem>
                    <para> Browse the elements of <filename>*.erl</filename> source files</para>
                </listitem>
                <listitem>
                    <para> Open files in the editor view</para>
                </listitem>
                <listitem>
                    <para> Open projects in a new window</para>
                </listitem>
                <listitem>
                    <para> Create new projects, modules, files, or folders</para>
                </listitem>
                <listitem>
                    <para> Manage existing files (cut, paste, delete, move or rename)</para>
                </listitem>
                <listitem>
                    <para> Restore deleted files from local history</para>
                </listitem>
                <listitem>
                    <para> Import or Export files and projects</para>
                </listitem>
            </itemizedlist>
            <para> Files that you select in the Navigator view affect the information that is
                displayed in other views. </para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="../images/erlangNavigatorView.png" format="PNG"/>
                </imageobject>
            </mediaobject>
        </sect1>
    </chapter>
    <chapter xml:id="developer_reference">
        <info>
            <title>Developer reference</title>
        </info>
        <sect1 xml:id="install_dev">
            <info>
                <title>Installation</title>
            </info>
            <para>Install Eclipse SDK, Erlang R11 and Erlide as usual.</para>
            <important>
                <para>For developing Erlide, you can only use R11 for the IDE runtime. This is
                    because we need have to support R11 at the user's site.</para>
            </important>
        </sect1>
        <sect1 xml:id="repository_dev">
            <info>
                <title>Retrieve the code from repository</title>
            </info>
            <para>The repository is Subversion based. I recommend using the Subclipse plugin from
                http://subclipse.tigris.org.</para>
            <para>The subversion repository has to be configured in the SVN Repository Browsing
                perspective. The URL for the repository is <link
                    xmlns:xlink="http://www.w3.org/1999/xlink"
                    xlink:href="https://erlide.svn.sourceforge.net/svnroot/erlide"
                    >https://erlide.svn.sourceforge.net/svnroot/erlide</link>. </para>
            <para>I recommend to check out and commit the code by following the procedure below, not
                by checking out from within
                Eclipse.<screen language="bash"><prompt>$</prompt> <command>cd erlide.workspace</command>  # use your workspace's folder
<prompt>$</prompt> <command>svn co https://erlide.svn.sourceforge.net/svnroot/erlide/trunk .</command></screen>
                On Windows, you can use TortoiseSVN to achieve the same effect.</para>
            <para>This is because from within Eclipse we can get atomic commits only per each
                project. In order to get those across all projects, the operations need to be done
                at the workspace level and thus the workspace needs to be a versioned directory.
                This is important when branching and tagging.</para>
            <para>Then go back to Eclipse and shut down the automatic builder (<menuchoice>
                    <guimenu>Project</guimenu>
                    <guimenuitem>Build Automatically</guimenuitem>
                </menuchoice>) then choose <menuchoice>
                    <guimenu>File</guimenu>
                    <guisubmenu>Import...</guisubmenu>
                    <guimenuitem>Existing projects into workspace</guimenuitem>
                </menuchoice>. Import all projects and turn automatic build back on.</para>
        </sect1>
        <sect1 xml:id="build_dev">
            <info>
                <title>Build</title>
            </info>
            <sect2>
                <info>
                    <title>Manual build</title>
                </info>
                <para>Go to the org.erlide.update project and create an entry for the current
                    version, then press <guibutton>Build</guibutton>.</para>
            </sect2>
            <sect2>
                <info>
                    <title>Automated build</title>
                </info>
                <para><emphasis>Currently doesn't work.</emphasis> This is implemented in the
                    org.erlide.build project. Description of the procedure will be added later.
                    TBD.</para>
            </sect2>
            <sect2>
                <info>
                    <title>Building the documentation</title>
                </info>
                <para>The source of the documentation is the <filename>erlide.xml</filename> file,
                    in Docbook 5 format. It is used to generate Eclipse infocenter help, HTML pages
                    to be put online and a printable PDF book.</para>
            </sect2>
            <sect2>
                <info>
                    <title>Starting the newly built Erlide</title>
                </info>
                <para>
                    <itemizedlist>
                        <listitem>
                            <para>After compiling the plugins, you can try starting the newly build
                                Erlide. For this you have to create a run configuration. Choose
                                    <menuchoice>
                                    <guimenu>Run</guimenu>
                                    <guisubmenu>Run...</guisubmenu>
                                    <guisubmenu>Eclipse Application</guisubmenu>
                                    <guimenuitem>New...</guimenuitem>
                                </menuchoice>. Use a nice, friendly name like
                                    <userinput>Erlide</userinput> and in the plug-ins tab select
                                    <guimenuitem>Choose from list</guimenuitem>.</para>
                        </listitem>
                        <listitem>
                            <para>In the main tab, select the "Program to run" to be "Run an
                                application". The default value (org.eclipse.ui.ide.workbench) is
                                fine.</para>
                        </listitem>
                        <listitem>
                            <para>Check all the Erlide plugins under "workspace plugins" and then
                                "Add required plugins" for a minimal setting. Press validate and add
                                any other plugins that may be needed.</para>
                        </listitem>
                        <listitem>
                            <para>Go to the <guimenu>Common</guimenu> tab and check the
                                    <guimenuitem>Show in favorites</guimenuitem> for both run and
                                debug.</para>
                        </listitem>
                    </itemizedlist>
                </para>
            </sect2>
        </sect1>
        <sect1 xml:id="plugins_dev">
            <info>
                <title>Plugin description</title>
            </info>
            <para>
                <variablelist>
                    <varlistentry>
                        <term>org.erlide</term>
                        <listitem>
                            <para>The feature that groups together all the deliverable plugins.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>org.erlide.core</term>
                        <listitem>
                            <para>Here we find the classes that model the Erlang code and that
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>org.erlide.jinterface</term>
                        <listitem>
                            <para>This is a wrapper around jinterface plus some extensions. It is
                                Eclipse-independent.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>org.erlide.ui</term>
                        <listitem>
                            <para>Here we find all UI related functionality.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>org.erlide.update</term>
                        <listitem>
                            <para>An update site is needed to distribute Erlide.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>org.erlide.help </term>
                        <listitem>
                            <para>The help files reside here. The documentation is written in
                                Docbook 5 format and from it we generate Eclipse help, online HTML
                                documentation, printable PDF.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>org.erlide.docs</term>
                        <listitem>
                            <para>Here we have no code, but administration-related files. Most
                                notable is the source to the home page of the project in the
                                    <filename>site</filename> directory.</para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </para>
        </sect1>
        <sect1 xml:id="process_dev">
            <info>
                <title>Development process</title>
            </info>
            <sect2>
                <info>
                    <title>Source code management</title>
                </info>
                <sect3>
                    <info>
                        <title>Repository structure </title>
                    </info>
                    <para>The source code is stored in a Subversion repository. We use a standard
                        structure, where the Eclipse project directories lie directly under the
                        trunk:
                        <screen>/
  branches/
    RB_x/
      org.erlide.*
  tags/
    REL_y/
      org.erlide.*
  trunk/
    org.erlide.*</screen>
                        This way, we can do a checkout on the whole trunk directly in a workspace
                        directory. This will allow to do atomic commits across all projects by using
                        an external <command>svn</command> client, because from within Eclipse the
                        atomicity is per project (a limitation of the Eclipse plugins).</para>
                </sect3>
                <sect3>
                    <info>
                        <title>Branches</title>
                    </info>
                    <para>
                        <itemizedlist spacing="compact">
                            <listitem>
                                <para>The trunk will contain the bleeding edge of development, but
                                    it should be buildable at any time.</para>
                            </listitem>
                            <listitem>
                                <para>Release branches will be named RB-x.x </para>
                            </listitem>
                            <listitem>
                                <para>Larger features should be implemented in separate
                                    branches.</para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </sect3>
            </sect2>
            <sect2>
                <info>
                    <title>Commit policies</title>
                </info>
                <para>To be specified.</para>
            </sect2>
            <sect2>
                <info>
                    <title>Testing</title>
                </info>
                <para>We strive to add both unit tests and "sanity" tests (the latter ones should
                    check that a build is somewhat sane and didn't mess up anything basic). </para>
            </sect2>
        </sect1>
    </chapter>
    <chapter xml:id="legal">
        <info>
            <title>Legal</title>
        </info>
        <para>
            <trademark class="copyright">The basic structure and some material is Copyright © IBM
                Corporation and others 2000, 2005. The material in this guide is Copyright © Vlad
                Dumitrescu and others 2006-2008.</trademark>
        </para>
        <sect1>
            <title>Terms and conditions regarding the use of this guide</title>
            <para>Unless otherwise indicated below, the Content is provided to you under the terms
                and conditions of the Eclipse Public License Version 1.0 ("EPL"). A copy of the EPL
                is available at <link xmlns:xlink="http://www.w3.org/1999/xlink"
                    xlink:href="http://www.eclipse.org/legal/epl-v10.html"
                    >http://www.eclipse.org/legal/epl-v10.html</link>. For purposes of the EPL,
                "Program" will mean the Content.</para>
            <para>If you did not receive this Content directly from the Eclipse Foundation, the
                Content is being redistributed by another party ("Redistributor") and different
                terms and conditions may apply to your use of any object code in the Content. Check
                the Redistributor's license that was provided with the Content. If no such license
                exists, contact the Redistributor. Unless otherwise indicated below, the terms and
                conditions of the EPL still apply to any source code in the Content.</para>
        </sect1>
    </chapter>
</book>
